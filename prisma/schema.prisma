// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role      @default(USER)

  accounts       Account[]
  sessions       Session[]
  properties     Property[]
  favorites      Favorite[]
  messages       Message[]   @relation("UserMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  appointments   Appointment[] @relation("UserAppointments")
  hostAppointments Appointment[] @relation("HostAppointments")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id            String    @id @default(cuid())
  title         String
  description   String    @db.Text
  price         Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  address       String
  city          String
  district      String
  ward          String?
  latitude      Float?
  longitude     Float?
  area          Float
  bedrooms      Int?
  bathrooms     Int?
  propertyType  PropertyType
  status        PropertyStatus @default(AVAILABLE)
  isFeatured    Boolean   @default(false)
  views         Int       @default(0)

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  images        Image[]
  amenities     PropertyAmenity[]
  favorites     Favorite[]
  appointments  Appointment[]
}

model Image {
  id          String   @id @default(cuid())
  url         String
  propertyId  String
  createdAt   DateTime @default(now())

  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Amenity {
  id        String   @id @default(cuid())
  name      String   @unique
  icon      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  properties PropertyAmenity[]
}

model PropertyAmenity {
  propertyId String
  amenityId  String
  
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  amenity    Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade)

  @@id([propertyId, amenityId])
}

model Favorite {
  userId     String
  propertyId String
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@id([userId, propertyId])
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  senderId  String
  receiverId String
  isRead    Boolean  @default(false)

  sender    User     @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Appointment {
  id          String   @id @default(cuid())
  date        DateTime
  status      AppointmentStatus @default(PENDING)
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  hostId      String
  propertyId  String

  user        User     @relation("UserAppointments", fields: [userId], references: [id], onDelete: Cascade)
  host        User     @relation("HostAppointments", fields: [hostId], references: [id], onDelete: Cascade)
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  HOST
  ADMIN
}

enum PropertyType {
  ROOM
  APARTMENT
  HOUSE
  STUDIO
  SHARED
}

enum PropertyStatus {
  AVAILABLE
  RENTED
  HIDDEN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
} 